import unittest
import numpy as np
from tests.test_base import BaseTest

from ProjectL.pieces import Piece, PieceSquare


class TestPiece(BaseTest):
    """Test cases for the Piece class"""
    
    def setUp(self):
        """Set up test fixtures before each test"""
        super().setUp()

    
    def test_piece_initialization(self):
        """Test that a piece is correctly initialized from configs"""

        # instantiate the pieces we want to test from the configs
        for piece_confs in self.test_configs["pieces"]:
            p = Piece(piece_confs)
            self.assertEqual(p.name, piece_confs["name"] )
            self.assertEqual(p.level, piece_confs["level"] )
            self.assertTrue(np.array_equal(p.shape, np.array(piece_confs["shape"])))
    
    def test_generate_cube(self):
        """Test that cube generation produces a valid 3D array for provided test by comparing the cube generated by the class to the answer that should be defined in the test configs for that piece under 'cube' key """
        # Verify cube dimensions
        # instantiate the pieces we want to test from the configs
        for piece_confs in self.test_configs["pieces"]:
            p = Piece(piece_confs)
            p.generate_cube()
            self.assertTrue(np.array_equal(np.sum(p.cube, axis=0), np.array(piece_confs["cube"])))


if __name__ == '__main__':
    unittest.main()
